if (isFALSE(cl.pos)) {
cl.pos <- "n"
}
if (is.null(cl.pos) | isTRUE(cl.pos)) {
if (type == "full")
cl.pos <- "r"
if (type == "lower")
cl.pos <- "b"
if (type == "upper")
cl.pos <- "r"
}
if (outline)
col.border <- "black"
if (!outline)
col.border <- col.fill
if (!add) {
par(mar = mar, bg = "white")
plot.new()
xlabwidth <- ylabwidth <- 0
for (i in 1:50) {
xlim <- c(m1 - 0.5 - xlabwidth, m2 + 0.5 + mm * cl.ratio *
(cl.pos == "r"))
ylim <- c(n1 - 0.5 - nn * cl.ratio * (cl.pos == "b"),
n2 + 0.5 + ylabwidth)
plot.window(xlim + c(-0.2, 0.2), ylim + c(-0.2, 0.2),
asp = 1, xaxs = "i", yaxs = "i")
x.tmp <- max(strwidth(newrownames, cex = tl.cex))
y.tmp <- max(strwidth(newcolnames, cex = tl.cex))
if (min(x.tmp - xlabwidth, y.tmp - ylabwidth) < 1e-04)
break
xlabwidth <- x.tmp
ylabwidth <- y.tmp
}
if (tl.pos == "n" | tl.pos == "d")
xlabwidth <- ylabwidth <- 0
if (tl.pos == "td")
ylabwidth <- 0
if (tl.pos == "ld")
xlabwidth <- 0
laboffset <- strwidth("W", cex = tl.cex) * tl.offset
xlim <- c(m1 - 0.5 - xlabwidth - laboffset, m2 + 0.5 +
mm * cl.ratio * (cl.pos == "r")) + c(-0.35, 0.15)
ylim <- c(n1 - 0.5 - nn * cl.ratio * (cl.pos == "b"),
n2 + 0.5 + ylabwidth * abs(sin(tl.srt * pi/180)) +
laboffset) + c(-0.15, 0.35)
if (.Platform$OS.type == "windows") {
windows.options(width = 7, height = 7 * diff(ylim)/diff(xlim))
}
plot.window(xlim = xlim, ylim = ylim, asp = 1, xlab = "",
ylab = "", xaxs = "i", yaxs = "i")
}
laboffset <- strwidth("W", cex = tl.cex) * tl.offset
symbols(Pos, add = TRUE, inches = FALSE, squares = rep(1,
len.DAT), bg = bg, fg = bg)
if (method == "circle" & plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, bg = col.fill,
circles = 0.9 * abs(DAT)^0.5/2, fg = col.border)
}
if (method == "ellipse" & plotCI == "n") {
ell.dat <- function(rho, length = 99) {
k <- seq(0, 2 * pi, length = length)
x <- cos(k + acos(rho)/2)/2
y <- cos(k - acos(rho)/2)/2
return(cbind(rbind(x, y), c(NA, NA)))
}
ELL.dat <- lapply(DAT, ell.dat)
ELL.dat2 <- 0.85 * matrix(unlist(ELL.dat), ncol = 2,
byrow = TRUE)
ELL.dat2 <- ELL.dat2 + Pos[rep(1:length(DAT), each = 100),
]
polygon(ELL.dat2, border = col.border, col = col.fill)
}
if (method == "number" & plotCI == "n") {
text(Pos[, 1], Pos[, 2], font = 2, col = col.fill, labels = round((DAT -
int) * ifelse(addCoefasPercent, 100, 1)/zoom, ifelse(addCoefasPercent,
0, 2)))
}
if (method == "pie" & plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, circles = rep(0.5,
len.DAT) * 0.85)
pie.dat <- function(theta, length = 100) {
k <- seq(pi/2, pi/2 - theta, length = 0.5 * length *
abs(theta)/pi)
x <- c(0, cos(k)/2, 0)
y <- c(0, sin(k)/2, 0)
return(cbind(rbind(x, y), c(NA, NA)))
}
PIE.dat <- lapply(DAT * 2 * pi, pie.dat)
len.pie <- unlist(lapply(PIE.dat, length))/2
PIE.dat2 <- 0.85 * matrix(unlist(PIE.dat), ncol = 2,
byrow = TRUE)
PIE.dat2 <- PIE.dat2 + Pos[rep(1:length(DAT), len.pie),
]
polygon(PIE.dat2, border = "black", col = col.fill)
}
if (method == "shade" & plotCI == "n") {
addshade <- match.arg(addshade)
symbols(Pos, add = TRUE, inches = FALSE, squares = rep(1,
len.DAT), bg = col.fill, fg = addgrid.col)
shade.dat <- function(w) {
x <- w[1]
y <- w[2]
rho <- w[3]
x1 <- x - 0.5
x2 <- x + 0.5
y1 <- y - 0.5
y2 <- y + 0.5
dat <- NA
if ((addshade == "positive" || addshade == "all") &
rho > 0) {
dat <- cbind(c(x1, x1, x), c(y, y1, y1), c(x,
x2, x2), c(y2, y2, y))
}
if ((addshade == "negative" || addshade == "all") &
rho < 0) {
dat <- cbind(c(x1, x1, x), c(y, y2, y2), c(x,
x2, x2), c(y1, y1, y))
}
return(t(dat))
}
pos_corr <- rbind(cbind(Pos, DAT))
pos_corr2 <- split(pos_corr, 1:nrow(pos_corr))
SHADE.dat <- matrix(na.omit(unlist(lapply(pos_corr2,
shade.dat))), byrow = TRUE, ncol = 4)
segments(SHADE.dat[, 1], SHADE.dat[, 2], SHADE.dat[,
3], SHADE.dat[, 4], col = shade.col, lwd = shade.lwd)
}
if (method == "square" & plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, squares = abs(DAT)^0.5,
bg = col.fill, fg = col.border)
}
if (method == "color" & plotCI == "n") {
symbols(Pos, add = TRUE, inches = FALSE, squares = rep(1,
len.DAT), bg = col.fill, fg = col.border)
}
symbols(Pos, add = TRUE, inches = FALSE, bg = NA, squares = rep(1,
len.DAT), fg = addgrid.col)
if (plotCI != "n") {
if (is.null(lowCI.mat) || is.null(uppCI.mat))
stop("Need lowCI.mat and uppCI.mat!")
if (!order == "original") {
lowCI.mat <- lowCI.mat[ord, ord]
uppCI.mat <- uppCI.mat[ord, ord]
}
pos.lowNew <- getPos.Dat(lowCI.mat)[[1]]
lowNew <- getPos.Dat(lowCI.mat)[[2]]
pos.uppNew <- getPos.Dat(uppCI.mat)[[1]]
uppNew <- getPos.Dat(uppCI.mat)[[2]]
if (!(method == "circle" || method == "square"))
stop("method shoud be circle or square if draw confidence interval!")
k1 <- (abs(uppNew) > abs(lowNew))
bigabs <- uppNew
bigabs[which(!k1)] <- lowNew[!k1]
smallabs <- lowNew
smallabs[which(!k1)] <- uppNew[!k1]
sig <- sign(uppNew * lowNew)
if (plotCI == "circle") {
symbols(pos.uppNew[, 1], pos.uppNew[, 2], add = TRUE,
inches = FALSE, circles = 0.95 * abs(bigabs)^0.5/2,
bg = ifelse(sig > 0, col.fill, col[ceiling((bigabs +
1) * length(col)/2)]), fg = ifelse(sig > 0,
col.fill, col[ceiling((bigabs + 1) * length(col)/2)]))
symbols(pos.lowNew[, 1], pos.lowNew[, 2], add = TRUE,
inches = FALSE, circles = 0.95 * abs(smallabs)^0.5/2,
bg = ifelse(sig > 0, bg, col[ceiling((smallabs +
1) * length(col)/2)]), fg = ifelse(sig > 0,
col.fill, col[ceiling((smallabs + 1) * length(col)/2)]))
}
if (plotCI == "square") {
symbols(pos.uppNew[, 1], pos.uppNew[, 2], add = TRUE,
inches = FALSE, squares = abs(bigabs)^0.5, bg = ifelse(sig >
0, col.fill, col[ceiling((bigabs + 1) * length(col)/2)]),
fg = ifelse(sig > 0, col.fill, col[ceiling((bigabs +
1) * length(col)/2)]))
symbols(pos.lowNew[, 1], pos.lowNew[, 2], add = TRUE,
inches = FALSE, squares = abs(smallabs)^0.5,
bg = ifelse(sig > 0, bg, col[ceiling((smallabs +
1) * length(col)/2)]), fg = ifelse(sig > 0,
col.fill, col[ceiling((smallabs + 1) * length(col)/2)]))
}
if (plotCI == "rect") {
rect.width <- 0.25
rect(pos.uppNew[, 1] - rect.width, pos.uppNew[, 2] +
smallabs/2, pos.uppNew[, 1] + rect.width, pos.uppNew[,
2] + bigabs/2, col = col.fill, border = col.fill)
segments(pos.lowNew[, 1] - rect.width, pos.lowNew[,
2] + DAT/2, pos.lowNew[, 1] + rect.width, pos.lowNew[,
2] + DAT/2, col = "black", lwd = 1)
segments(pos.uppNew[, 1] - rect.width, pos.uppNew[,
2] + uppNew/2, pos.uppNew[, 1] + rect.width,
pos.uppNew[, 2] + uppNew/2, col = "black", lwd = 1)
segments(pos.lowNew[, 1] - rect.width, pos.lowNew[,
2] + lowNew/2, pos.lowNew[, 1] + rect.width,
pos.lowNew[, 2] + lowNew/2, col = "black", lwd = 1)
segments(pos.lowNew[, 1] - 0.5, pos.lowNew[, 2],
pos.lowNew[, 1] + 0.5, pos.lowNew[, 2], col = "grey70",
lty = 3)
}
}
if (!is.null(p.mat) & !insig == "n") {
if (!order == "original")
p.mat <- p.mat[ord, ord]
pos.pNew <- getPos.Dat(p.mat)[[1]]
pNew <- getPos.Dat(p.mat)[[2]]
ind.p <- which(pNew > (sig.level))
if (insig == "pch") {
points(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p],
pch = pch, col = pch.col, cex = pch.cex, lwd = 2)
}
if (insig == "p-value") {
text(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p],
round(pNew[ind.p], 4), col = pch.col)
}
if (insig == "blank") {
symbols(pos.pNew[, 1][ind.p], pos.pNew[, 2][ind.p],
inches = FALSE, squares = rep(1, length(pos.pNew[,
1][ind.p])), fg = addgrid.col, bg = bg, add = TRUE)
}
}
if (cl.pos != "n") {
colRange <- assign.color(cl.lim2)
ind1 <- which(col == colRange[1])
ind2 <- which(col == colRange[2])
colbar <- col[ind1:ind2]
if (is.null(cl.length))
cl.length <- ifelse(length(colbar) > 20, 11, length(colbar) +
1)
labels <- seq(cl.lim[1], cl.lim[2], length = cl.length)
at <- seq(0, 1, length = length(labels))
if (cl.pos == "r") {
vertical <- TRUE
xlim <- c(m2 + 0.5 + mm * 0.02, m2 + 0.5 + mm * cl.ratio)
ylim <- c(n1 - 0.5, n2 + 0.5)
}
if (cl.pos == "b") {
vertical <- FALSE
xlim <- c(m1 - 0.5, m2 + 0.5)
ylim <- c(n1 - 0.5 - nn * cl.ratio, n1 - 0.5 - nn *
0.02)
}
colorlegend(colbar = colbar, labels = round(labels, 2),
offset = cl.offset, ratio.colbar = 0.3, cex = cl.cex,
xlim = xlim, ylim = ylim, vertical = vertical, align = cl.align.text)
}
if (tl.pos != "n") {
ylabwidth2 <- strwidth(newrownames, cex = tl.cex)
xlabwidth2 <- strwidth(newcolnames, cex = tl.cex)
pos.xlabel <- cbind(m1:m2, n2 + 0.5 + laboffset)
pos.ylabel <- cbind(m1 - 0.5, n2:n1)
if (tl.pos == "td") {
if (type != "upper")
stop("type should be \"upper\" if tl.pos is \"dt\".")
pos.ylabel <- cbind(m1:(m1 + nn) - 0.5, n2:n1)
}
if (tl.pos == "ld") {
if (type != "lower")
stop("type should be \"lower\" if tl.pos is \"ld\".")
pos.xlabel <- cbind(m1:m2, n2:(n2 - mm) + 0.5 + laboffset)
}
if (tl.pos == "d") {
pos.ylabel <- cbind(m1:(m1 + nn) - 0.5, n2:n1)
pos.ylabel <- pos.ylabel[1:min(n, m), ]
symbols(pos.ylabel[, 1] + 0.5, pos.ylabel[, 2], add = TRUE,
bg = bg, fg = addgrid.col, inches = FALSE, squares = rep(1,
length(pos.ylabel[, 1])))
text(pos.ylabel[, 1] + 0.5, pos.ylabel[, 2], newcolnames[1:min(n,
m)], col = tl.col, cex = tl.cex, ...)
}
else {
text(pos.xlabel[, 1], pos.xlabel[, 2], newcolnames,
srt = tl.srt, adj = ifelse(tl.srt == 0, c(0.5,
0), c(0, 0)), col = tl.col, cex = tl.cex, offset = tl.offset,
...)
text(pos.ylabel[, 1], pos.ylabel[, 2], newrownames,
col = tl.col, cex = tl.cex, pos = 2, offset = tl.offset,
...)
}
}
title(title, ...)
if (!is.null(addCoef.col) & (!method == "number")) {
text(Pos[, 1], Pos[, 2], col = addCoef.col, labels = round((DAT -
int) * ifelse(addCoefasPercent, 100, 1)/zoom, ifelse(addCoefasPercent,
0, 2)))
}
if (type == "full" & plotCI == "n" & !is.null(addgrid.col))
rect(m1 - 0.5, n1 - 0.5, m2 + 0.5, n2 + 0.5, border = addgrid.col)
if (!is.null(addrect) & order == "hclust" & type == "full") {
corrRect.hclust(corr, k = addrect, method = hclust.method,
col = rect.col, lwd = rect.lwd)
}
invisible(corr)
}
micorrplot.mixed <- function (corr, lower = "number", upper = "circle", tl.pos = c("d", "lt", "n"),
diag = c("n", "l", "u"), bg = "white", addgrid.col = "gray",
...)
{
diag <- match.arg(diag)
tl.pos <- match.arg(tl.pos)
n <- nrow(corr)
micorrplot(corr, type = "upper", method = upper, diag = TRUE,
tl.pos = tl.pos, ...)
micorrplot(corr, add = TRUE, type = "lower", method = lower, addCoef.col = 'black'
diag = (diag == "l"), tl.pos = "n", cl.pos = "n", ...)
if (diag == "n" & tl.pos != "d") {
symbols(1:n, n:1, add = TRUE, bg = bg, fg = addgrid.col,
inches = FALSE, squares = rep(1, n))
}
}
micorrplot.mixed <- function (corr, lower = "number", upper = "circle", tl.pos = c("d", "lt", "n"),
diag = c("n", "l", "u"), bg = "white", addgrid.col = "gray",
...)
{
diag <- match.arg(diag)
tl.pos <- match.arg(tl.pos)
n <- nrow(corr)
micorrplot(corr, type = "upper", method = upper, diag = TRUE,
tl.pos = tl.pos, ...)
micorrplot(corr, add = TRUE, type = "lower", method = lower, addCoef.col = 'black',
diag = (diag == "l"), tl.pos = "n", cl.pos = "n", ...)
if (diag == "n" & tl.pos != "d") {
symbols(1:n, n:1, add = TRUE, bg = bg, fg = addgrid.col,
inches = FALSE, squares = rep(1, n))
}
}
micorrplot.mixed(m,
tl.cex=.7, tl.col='black', tl.pos='lt',
p.mat=pvnew, insig='p-value', sig.level=0.001,
upper='circle',
lower='number')
dev.off()
micorrplot(pea, method= 'ellipse', diag=FALSE,
tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'ellipse', diag=FALSE, type='upper',
tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'ellipse', diag=FALSE, type='upper',
tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', diag=FALSE, type='lower',
tl.cex=.8, tl.col='black', add=TRUE)
micorrplot(pea, method= 'ellipse', diag=FALSE, type='upper',
tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'ellipse', diag=FALSE, type='upper',
tl.cex=.8, tl.col='black', tl.pos='lt',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', diag=FALSE, type='lower',
tl.cex=.8, tl.col='black', add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',
tl.cex=.8, tl.col='black', tl.pos='lt',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', diag=FALSE, type='lower',
tl.cex=.8, tl.col='black', add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',
tl.cex=.8, tl.col='black', tl.pos='lt',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', diag=FALSE, type='lower',
tl.pos='n', add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',
tl.cex=.8, tl.col='black', tl.pos='lt',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'ellipse', type='upper',
tl.cex=.8, tl.col='black', tl.pos='ld',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'ellipse', type='upper',
tl.cex=.8, tl.col='black', tl.pos='td',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'ellipse', type='upper',
tl.cex=.8, tl.col='black', tl.pos='lt',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=FALSE,
tl.pos='n', add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',diag=FALSE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=FALSE,
tl.pos='n', add=TRUE)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n')
micorrplot(pea, method= 'ellipse', type='upper',diag=FALSE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001, add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001, add=TRUE)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n')
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001, add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001, add=TRUE)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n')
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n',  add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n',  add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, addCoef.col='black',
tl.pos='n',  add=TRUE)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, addCoef.col='black',
tl.pos='n',  add=TRUE)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, addCoef.col='black',
tl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='black',
tl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='gray',
tl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey90',
tl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey10',
tl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n', cl='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n', cl='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE,
tl.pos='n', cl.pos='n')
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n', cl.pos='n')
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n', cl.pos='n',
add=TRUE)
pdf(file=paste(di,'mixed.pdf', sep = ''), height = 8, width = 8)
# Mi corrplot (see help)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, addCoef.col='black',
tl.pos='n',  add=TRUE)
dev.off()
pdf(file=paste(di,'mixed.pdf', sep = ''), height = 8, width = 8)
# Mi corrplot (see help)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, addCoef.col='black',
tl.pos='n',  add=TRUE)
dev.off()
pdf(file=paste(di,'mixed.pdf', sep = ''), height = 8, width = 8)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n', cl.pos='n',
add=TRUE)
dev.off()
png(file=paste(di,'mixed.png', sep = ''), height = 8, width = 8)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n', cl.pos='n',
add=TRUE)
dev.off()
?png
png(file=paste(di,'mixed.png', sep = ''), height = 800, width = 800)
micorrplot(pea, method= 'ellipse', type='upper',diag=TRUE,
tl.pos='lt', tl.cex=.8, tl.col='black',
p.mat=pvnew, insig='p-value', sig.level=0.001)
micorrplot(pea, method= 'number', type='lower',
diag=TRUE, col='grey40',
tl.pos='n', cl.pos='n',
add=TRUE)
dev.off()
library(slidify)
slidify("index.Rmd")
setwd('/Users/ajpelu/Dropbox/Seminarios/Repro_in_Science/repro_seminar/repro_ajpelu/')
slidify("index.Rmd")
